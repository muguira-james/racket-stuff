#lang racket

(require web-server/servlet
         web-server/servlet-env
         data/queue
         json
         "genout.rkt")

(define (add request)
  ; put something in a queue
  ; input: { topic: "name", payload: "data-type" }
  (let* ([hsh (request->jshash request)]
         [topic-name (hash-ref hsh 'topicname)]
         [payload-data (hash-ref hsh 'payload)])
    (begin         
      (add-data-to-topic topic-name payload-data)
        
      (let ([rtn (make-hash)])
        (build-json-response rtn 'cmd "enque")
        (build-json-response rtn 'topic-name topic-name)
        (build-json-response rtn 'data payload-data)

        (displayln (with-output-to-string (lambda () (write-json  rtn))))
        (http-response (with-output-to-string (lambda  () (write-json rtn))))))))

(define (request->jshash request)
  (string->jsexpr (bytes->string/utf-8 (request-post-data/raw request))))

(define (build-json-response hsh key value)
  (hash-set! hsh key value))

(define (http-response content)  
  (response/full
    200                  ; HTTP response code.
    #"OK"                ; HTTP response message.
    (current-seconds)    ; Timestamp.
    TEXT/HTML-MIME-TYPE  ; MIME type for content.
    '()                  ; Additional HTTP headers.
    (list                ; Content (in bytes) to send to the browser.
      (string->bytes/utf-8 content))))


(define-values (dispatch generate-url)
  ;; URL routing table (URL dispatcher).
  (dispatch-rules
   [("do") do-nothing]
   [("hello") hello]  ; check to see if the service is working
   [("add") #:method "post" add]
   [else (error "page not found")]))



(define (request-handler request)
  (dispatch request))


(serve/servlet request-handler
               #:port 8000
               #:listen-ip "0.0.0.0"
               #:launch-browser? #f
               ; #:servlet-path "/api")
               #:servlet-regexp #rx"") 
